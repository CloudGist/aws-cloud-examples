{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "VpcId": {
      "Description" : "Name of default VPC id",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription" : "must be the id of the default vpc."
    }
  },

  "Resources": {
    "OpsworksStack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "DefaultAvailabilityZone": "eu-central-1a",
        "DefaultInstanceProfileArn": { "Fn::Join" : ["", [
          "arn:aws:iam::",
          { "Ref" : "AWS::AccountId" },
          ":instance-profile/aws-opsworks-ec2-role" ]] },
        "DefaultSshKeyName": { "Ref" : "KeyName" },
        "DefaultOs": "Amazon Linux 2015.09",
        "Name": "OpsworksStack",
        "HostnameTheme": "Layer_Dependent",
        "ServiceRoleArn": { "Fn::Join" : ["", [
          "arn:aws:iam::",
          { "Ref" : "AWS::AccountId" },
          ":role/aws-opsworks-service-role" ]] },
        "UseCustomCookbooks": "false",
        "Attributes": {
          "Color": "rgb(45, 114, 184)"
        },
        "ConfigurationManager": {
          "Name": "Chef",
          "Version": "12"
        }
      }
    },
    "OpsworksLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "true",
        "EnableAutoHealing": "true",
        "Name": "Opsworks Server",
        "Shortname": "opsworksserver",
        "Type": "custom",
	"CustomSecurityGroupIds" : [
          { "Fn::GetAtt" : [ "OpsWorksSecurityGroup", "GroupId" ]}
        ],
        "StackId": {
          "Ref": "OpsworksStack"
        }
      }
    },

    "OpsworksInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "Architecture": "x86_64",
        "AvailabilityZone": "eu-central-1a",
        "InstallUpdatesOnBoot": "true",
        "InstanceType": "t2.small",
        "Os": "Amazon Linux 2015.09",
        "RootDeviceType": "ebs",
        "StackId": {
          "Ref": "OpsworksStack"
        },
        "LayerIds": [
          {
            "Ref": "OpsworksLayer"
          }
        ]
      }
    },

    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone" : "true",
        "SecurityGroups": [ { "Ref": "ELBSecurityGroup" } ],
        "AvailabilityZones": { "Fn::GetAZs" : "" },
        "Listeners": [ {
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        } ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "90",
          "Timeout": "60"
        }
      }
    },

    "ELBAttachment": {
      "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
      "Properties": {
        "ElasticLoadBalancerName": { "Ref": "ELB" },
        "LayerId": { "Ref": "OpsworksLayer" }
      }
    },

    "OpsWorksSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup" } }
        ]
      }
    },

    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound access to the ELB",
	"VpcId": { "Ref" : "VpcId" },
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        } ],
        "SecurityGroupEgress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        } ]
      }
    }

  },

  "Description": "test with opsworks and elb",

  "Outputs": {
    "StackId": {
      "Description": "Stack Id of newly created OpsWorks stack",
      "Value": { "Ref": "OpsworksStack" }
    },
    "URL": {
      "Description" : "URL for newly created application",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ELB", "DNSName" ]}]] }
    }
  }
}
