{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters" : {
    "BucketName" : {
      "Description" : "The EC2 Bucket",
      "Type" : "String"
    },

    "CookBookFile": {
      "Description" : "Name of the tarball that contains the cookbook",
      "Type": "String",
      "Default" : "cookbooks.tar.gz",
      "ConstraintDescription" : "must be the name tar.gz file that contains a chef cookbook"
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    }
  },

  "Resources": {
    "OpsworksStack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "DefaultAvailabilityZone": "eu-central-1a",
        "DefaultInstanceProfileArn": { "Fn::Join" : ["", [
          "arn:aws:iam::",
          { "Ref" : "AWS::AccountId" },
          ":instance-profile/aws-opsworks-ec2-role" ]] },
        "DefaultSshKeyName": { "Ref" : "KeyName" },
        "DefaultOs": "Amazon Linux 2016.03",
        "Name": "OpsworksStack",
        "HostnameTheme": "Layer_Dependent",
        "ServiceRoleArn": { "Fn::Join" : ["", [
          "arn:aws:iam::",
          { "Ref" : "AWS::AccountId" },
          ":role/aws-opsworks-service-role" ]] },
        "UseCustomCookbooks": "true",
        "CustomCookbooksSource" : {
          "Type" : "s3",
          "Url" : { "Fn::Join" : ["", ["https://s3.",
            { "Ref" : "AWS::Region" },
            ".amazonaws.com/",
            { "Ref": "BucketName" },
            "/",
            { "Ref": "CookBookFile" } ]]}
        },
        "Attributes": {
          "Color": "rgb(45, 114, 184)",
          "EcsClusterArn" : {
            "Fn::Join" : [ "", [ "arn:aws:ecs:", {
                "Ref" : "AWS::Region"
              }, ":", {
                "Ref" : "AWS::AccountId"
              }, ":cluster/", {
                "Ref" : "ecsCluster"
            } ] ]
	  }
        },
        "ConfigurationManager": {
          "Name": "Chef",
          "Version": "12"
        }
      },
      "DependsOn": [
        "ecsCluster"
      ]
    },
    "OpsworksLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "true",
        "EnableAutoHealing": "true",
        "Name": "Opsworks Server",
        "Shortname": "opsworksserver",
        "Type": "custom",
        "CustomRecipes": {
          "Configure": [
            "jenkins_dev::default"
          ],
          "Deploy": [
            "jenkins_dev::default"
          ],
          "Setup": [
            "jenkins_dev::default"
          ]
        },
        "CustomSecurityGroupIds" : [
          { "Fn::GetAtt" : [ "JenkinsServerSecurityGroup", "GroupId" ]}
        ],
        "StackId": {
          "Ref": "OpsworksStack"
        }
      }
    },

    "ecsCluster" : {
      "Type" : "AWS::ECS::Cluster"
    },

    "RegisterCluster": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
	  "Fn::GetAtt" : ["OpsworksRegisterCluster", "Arn"] },
        "EcsClusterName": {
	  "Ref" : "ecsCluster"
        },
        "OpsworksStackId": {
	  "Ref" : "OpsworksStack"
        }
      },
      "DependsOn": [
        "OpsworksStack"
      ]
    },

    "OpsworksRegisterCluster": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "import boto3",
	    "import json",
	    "import cfnresponse",
            "ecsclient = boto3.client('ecs')",
            "opsworksclient = boto3.client('opsworks',",
	    "  region_name='us-east-1',",
	    "  endpoint_url='https://opsworks.us-east-1.amazonaws.com')",
            "def lambda_handler(event, context):",
            "  try:",
            "    if (event['RequestType'] == 'Create'):",
            "      ecscluster = ecsclient.describe_clusters(clusters=[",
	    "        event['ResourceProperties']['EcsClusterName']])",
            "      response = opsworksclient.register_ecs_cluster(",
            "        EcsClusterArn=ecscluster['clusters'][0]['clusterArn'],",
            "        StackId=event['ResourceProperties']['OpsworksStackId']",
            "      )",
	    "      responseData = {}",
	    "      responseData['data'] = response['EcsClusterArn']",
            "      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
	    "    else:",
	    "      responseData = {}",
            "      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
	    "  except Exception as e:",
	    "    responseData = {}",
	    "    responseData['error'] = e.message",
            "    cfnresponse.send(event, context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
          ]]}
        },
        "Runtime": "python2.7",
        "Timeout": "10"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
            },
	    {
                "Effect": "Allow",
                "Action": ["opsworks:RegisterEcsCluster"],
                "Resource": "arn:aws:opsworks:*:*:*"
            },
	    {
                "Effect": "Allow",
                "Action": ["ecs:DescribeClusters"],
                "Resource": "arn:aws:ecs:*:*:*"
            }]
          }
        }]
      }
    },

    "OpsworksEcsLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "Attributes" : {
          "EcsClusterArn" : {
            "Fn::Join" : [ "", [ "arn:aws:ecs:", {
                "Ref" : "AWS::Region"
              }, ":", {
                "Ref" : "AWS::AccountId"
              }, ":cluster/", {
	         "Ref" : "ecsCluster"
            } ] ]
          }
        },
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "true",
	"CustomInstanceProfileArn" : { "Fn::Join" : ["", [
          "arn:aws:iam::",
          { "Ref" : "AWS::AccountId" },
          ":instance-profile/ecsInstanceRole" ]] },
	"EnableAutoHealing": "true",
        "Name": "Opsworks ECS Cluster",
        "Shortname": "opsworksecscluster",
        "Type": "ecs-cluster",
        "CustomRecipes": {
          "Configure": [
            "jenkins_dev::ecs_cluster"
          ],
          "Deploy": [
            "jenkins_dev::ecs_cluster"
          ],
          "Setup": [
            "jenkins_dev::ecs_cluster"
          ]
        },
        "CustomSecurityGroupIds" : [
          { "Fn::GetAtt" : [ "JenkinsServerSecurityGroup", "GroupId" ]}
        ],
        "StackId": {
          "Ref": "OpsworksStack"
        }
      },
      "DependsOn": [
        "RegisterCluster"
      ]
    },

    "OpsworksInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "Architecture": "x86_64",
        "AvailabilityZone": "eu-central-1a",
        "InstallUpdatesOnBoot": "true",
        "InstanceType": "t2.small",
        "Os": "Amazon Linux 2016.03",
        "RootDeviceType": "ebs",
        "StackId": {
          "Ref": "OpsworksStack"
        },
        "LayerIds": [
          {
            "Ref": "OpsworksLayer"
          }
        ]
      }
    },

    "OpsworksEcsInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "Architecture": "x86_64",
        "AvailabilityZone": "eu-central-1a",
        "InstallUpdatesOnBoot": "true",
        "InstanceType": "t2.small",
        "Os": "Amazon Linux 2016.03",
        "RootDeviceType": "ebs",
        "StackId": {
          "Ref": "OpsworksStack"
        },
        "LayerIds": [
          {
            "Ref": "OpsworksEcsLayer"
          }
        ]
      }
    },

    "JenkinsServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Enable inboud connection to the OpsWorks instances",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp",
	    "FromPort": "8080",
	    "ToPort": "8080",
	    "CidrIp" : { "Ref" : "SSHLocation"}
	  }
	]
      }
    },

    "s3policyjenkinschef": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "BucketName"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AddPerm",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "BucketName"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      }
    }

  },

  "Description": "cloudformation template for jenkins plus ecs in opsworks with configuration using chef cookbook"
}
