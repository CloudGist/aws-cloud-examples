{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Install ec2 instances using an autoscale group and run the blackgem pipeline",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Web Server EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
    },

    "SourceBucket" : {
      "Description" : "S3 bucket for downloading source zips",
      "Type" : "String",
      "Default" : "blackgemzips",
      "ConstraintDescription" : "Must be a valid S3 Bucket"
    },

    "DataBucket" : {
	"Description" : "S3 bucket for downloading fits files",
	"Type" : "String",
	"Default" : "blackgemsmall",
	"ConstraintDescription" : "Must be a valid S3 Bucket"
    },

    "OutputBucket" : {
	"Description" : "S3 bucket for uploading run logs",
	"Type" : "String",
	"Default" : "blackgemruns",
	"ConstraintDescription" : "Must be a valid S3 Bucket"
    },

    "TestRunCapacity": {
      "Default": "1",
      "Description" : "The number of EC2 instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "9",
      "ConstraintDescription" : "must be between 1 and 5 EC2 instances."
    }

  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    }
,
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-1ccae774", "HVM64" : "ami-1ecae776", "HVMG2" : "ami-8c6b40e4"},
      "us-west-2"        : {"PV64" : "ami-ff527ecf", "HVM64" : "ami-e7527ed7", "HVMG2" : "ami-abbe919b"},
      "us-west-1"        : {"PV64" : "ami-d514f291", "HVM64" : "ami-d114f295", "HVMG2" : "ami-f31ffeb7"},
      "eu-west-1"        : {"PV64" : "ami-bf0897c8", "HVM64" : "ami-a10897d6", "HVMG2" : "ami-d5bc24a2"},
      "eu-central-1"     : {"PV64" : "ami-ac221fb1", "HVM64" : "ami-a8221fb5", "HVMG2" : "ami-7cd2ef61"},
      "ap-northeast-1"   : {"PV64" : "ami-27f90e27", "HVM64" : "ami-cbf90ecb", "HVMG2" : "ami-6318e863"},
      "ap-southeast-1"   : {"PV64" : "ami-acd9e8fe", "HVM64" : "ami-68d8e93a", "HVMG2" : "ami-3807376a"},
      "ap-southeast-2"   : {"PV64" : "ami-ff9cecc5", "HVM64" : "ami-fd9cecc7", "HVMG2" : "ami-89790ab3"},
      "sa-east-1"        : {"PV64" : "ami-bb2890a6", "HVM64" : "ami-b52890a8", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-fa39abc3", "HVM64" : "ami-f239abcb", "HVMG2" : "NOT_SUPPORTED"}
    },

    "Region2Principal" : {
      "us-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-2"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "eu-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-northeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-2" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "sa-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "cn-north-1"     : { "EC2Principal" : "ec2.amazonaws.com.cn", "OpsWorksPrincipal" : "opsworks.amazonaws.com.cn" },
      "eu-central-1"   : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" }
    },
    
    "Region2ARNPrefix": {
      "us-east-1"      : { "ARNPrefix": "arn:aws:" },
      "us-west-1"      : { "ARNPrefix": "arn:aws:" },
      "us-west-2"      : { "ARNPrefix": "arn:aws:" },
      "eu-west-1"      : { "ARNPrefix": "arn:aws:" },
      "ap-northeast-1" : { "ARNPrefix": "arn:aws:" },
      "ap-southeast-1" : { "ARNPrefix": "arn:aws:" },
      "ap-southeast-2" : { "ARNPrefix": "arn:aws:" },
      "sa-east-1"      : { "ARNPrefix": "arn:aws:" },
      "cn-north-1"     : { "ARNPrefix": "arn:aws-cn:" },
      "eu-central-1"   : { "ARNPrefix": "arn:aws:" }
    }
  },

  "Resources" : {
    "LogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "Service": [{ "Fn::FindInMap" : ["Region2Principal", {"Ref" : "AWS::Region"}, "EC2Principal"]}] },
            "Action": [ "sts:AssumeRole" ]
        } ] },
        "Path": "/",
        "Policies": [ {
            "PolicyName": "LogRolePolicy",
            "PolicyDocument": {
		"Version": "2012-10-17",
		"Statement": [ {
		    "Effect": "Allow",
		    "Action": ["logs:CreateLogGroup",
			       "logs:CreateLogStream",
			       "logs:PutLogEvents",
			       "logs:DescribeLogStreams"],
		    "Resource": [ { "Fn::Join" : ["", [ { "Fn::FindInMap" : ["Region2ARNPrefix", {"Ref" : "AWS::Region"}, "ARNPrefix"] }, "logs:*:*:*" ]]}]
		},
		{
		    "Effect": "Allow",
		    "Action": [
			"s3:Get*",
			"s3:List*"
		    ],
		    "Resource": [ "*" ]
		},
		{
                    "Effect": "Allow",
                    "Action": [
                        "s3:PutObject",
                        "s3:List*"
                    ],
                    "Resource": [ {
                        "Fn::Join" : [ "", [
                            "arn:aws:s3:::",
                            { "Ref" : "OutputBucket" },
                            "/*"
                        ]]
                    }]
                },
		{
		    "Effect": "Allow",
		    "Action": [
			"dynamodb:PutItem"
		    ],
		    "Resource": [ "arn:aws:dynamodb:eu-central-1:*:table/blackgemruns" ]
		}
	  ] }
        } ] }
    },

    "LogRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "LogRole" } ]
      }
    },

    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },

    "TestRunGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "TestRunCapacity" }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
	  "Count" : { "Ref" : "TestRunCapacity" },
          "Timeout" : "PT30M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT30M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "chef_install" : ["install_cfn", "install_logs", "install_monetdb", "install_blackgem" ]
          },
          "install_cfn" : {
	    "packages" : {
	      "yum" : {
	        "gcc" : [],
		"autoconf" : [],
		"libtool" : [],
		"git" : []
	      }
	    },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets chef_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
	    },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },
	  "install_logs": {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            },

            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file= /var/awslogs/state/agent-state\n",

                  "[/var/log/cloud-init.log]\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init-output.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init.log]\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init-cmd.log]\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init-cmd.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-hup.log]\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-hup.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-wire.log]\n",
                  "file = /var/log/cfn-wire.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-wire.log\n",
                  "datetime_format = \n"
                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": { "Fn::Join": [ "", [
                  "[plugins]\n",
                  "cwlogs = cwlogs\n",
                  "[default]\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n"
                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_create_state_directory" : {
                "command" : "mkdir -p /var/awslogs/state"
              },
              "02_enable_epel" : {
                "command" : "yum-config-manager --enable epel"
              },
              "03_yum_update" : {
                "command" : "yum -y update"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs"    : { "enabled" : "true", "ensureRunning" : "true",
                                 "files" : [ "/etc/awslogs/awslogs.conf" ] }
              }
            }
	  },
	  "install_monetdb": {
            "packages" : {
              "yum" : {
	      	    "ant" : [],
		    "autoconf" : [],
		    "automake" : [],
		    "libtool" : [],
		    "flex" : [],
		    "bison" : [],
		    "libxml2-devel" : [],
		    "pcre-devel" : [],
		    "openssl-devel" : [],
		    "gettext-devel" : [],
		    "rpmdevtools" : [],
		    "python34-devel" : [],
		    "emacs" : [],
		    "cfitsio-devel" : [],
		    "pyfits" : []
              }
            },
            "files": {
              "/home/ec2-user/.monetdb": {
                "content": { "Fn::Join": [ "", [
                  "user=monetdb\n",
                  "password=monetdb\n"
		  ]]},
                "mode": "000600",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
	    "commands" : {
              "03_install_samtools" : {
                "command" : "yum -y install samtools samtools-devel"
              },
		"04_get_monetdb_source" : {
		    "command" : {
		    "Fn::Join" : [ "", [
				   "aws --region eu-central-1 s3 cp s3://",
				   { "Ref" : "SourceBucket" },
				   "/MonetDB-11.21.5.zip /home/ec2-user/"]] }
              },
              "05_make_build_dir" : {
                "command" : "mkdir /home/ec2-user/build"
              },
              "06_unzip_source" : {
                "command" : "unzip MonetDB-11.21.5.zip",
                "cwd" : "/home/ec2-user/"
              },
              "07_bootstrap" : {
                "command" : "./bootstrap",
                "cwd" : "/home/ec2-user/MonetDB-11.21.5"
              },
              "08_configure" : {
                "command" : "/home/ec2-user/MonetDB-11.21.5/configure --prefix=/home/ec2-user/install --with-samtools=no",
                "cwd" : "/home/ec2-user/build",
		"env" : { "JAVA_HOME" : "/usr/lib/jvm/java", "PATH" : "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin" }
              },
              "09_make" : {
                "command" : "make",
                "cwd" : "/home/ec2-user/build",
		"env" : { "JAVA_HOME" : "/usr/lib/jvm/java", "PATH" : "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin" }
              },
              "10_make_install" : {
                "command" : "make install",
                "cwd" : "/home/ec2-user/build",
		"env" : { "JAVA_HOME" : "/usr/lib/jvm/java", "PATH" : "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin" }
              }
            }
	  },
	  "install_blackgem": {
            "files": {
              "/home/ec2-user/instance-data.txt": {
                "content": { "Fn::Join": [ "", [
                    "INSTANCE_TYPE=",
                    { "Ref" : "InstanceType" }, "\n",
		    "DATA_BUCKET=",
                    { "Ref" : "DataBucket" }, "\n",
                    "STACK_NAME=",
		    { "Ref": "AWS::StackId" }, "\n"
		  ]]},
                "mode": "000644",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
            "commands" : {
              "01_get_blackgem_source" : {
                  "command" : {
		      "Fn::Join" : [ "", [
			  "aws --region eu-central-1 s3 cp s3://",
			  { "Ref" : "SourceBucket" },
			  "/blackgem-778e07ac37a0.zip /home/ec2-user/"
			  ]]
		  }
              },
              "02_make_img_dir" : {
                "command" : "mkdir /home/ec2-user/blackgemimages"
              },
              "03_unzip_source" : {
                "command" : "unzip blackgem-778e07ac37a0.zip",
                "cwd" : "/home/ec2-user/"
              },
              "04_chown_code" : {
                "command" : "chown -R ec2-user.ec2-user /home/ec2-user/blackgem-778e07ac37a0"
              },
              "05_get_blackgem_images" : {
                  "command" : {
		      "Fn::Join" : [ "", [
			  "aws --region eu-central-1 s3 cp s3://",
			  { "Ref" : "DataBucket" },
			  "/ /home/ec2-user/blackgemimages/ --recursive" ]]
		  }
              },
              "06_chown_images" : {
                "command" : "chown -R ec2-user.ec2-user /home/ec2-user/blackgemimages"
              },
              "07_get_cron_script" : {
                  "command" : {
                     "Fn::Join" : [ "", [
                         "aws --region eu-central-1 s3 cp s3://",
                         { "Ref" : "SourceBucket" },
                         "/blackgem_run.sh /home/ec2-user/blackgem_run.sh" ]]
                 }
              },
              "08_chmod_script" : {
                "command" : "chmod +x /home/ec2-user/blackgem_run.sh"
              },
              "09_chown_images" : {
                "command" : "chown ec2-user.ec2-user /home/ec2-user/blackgem_run.sh"
              },
              "10_get_cron_job" : {
                  "command" : {
                     "Fn::Join" : [ "", [
                         "aws --region eu-central-1 s3 cp s3://",
                         { "Ref" : "SourceBucket" },
                         "/blackgemruncron /etc/cron.d/blackgemruncron" ]]
                 }
              },
              "11_restart_cron" : {
                "command" : "/sbin/service crond restart"
              }
	    }
	  }
	}
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile" : { "Ref" : "LogRoleInstanceProfile" },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets chef_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource TestRunGroup ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
	}
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
        } ]
      }
    }

  }

}
